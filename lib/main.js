// Generated by CoffeeScript 1.4.0

/*
Initialize
*/


(function() {
  var app_init, app_render, camera, container, cube, renderer, scene, sceneHeight, sceneWidth, stats;

  scene = null;

  camera = null;

  renderer = null;

  container = null;

  cube = null;

  stats = null;

  sceneWidth = window.innerWidth / 2;

  sceneHeight = window.innerHeight / 2;

  app_init = function() {
    var axis, geometry, grid, grid_material, i, line, material, size, step, _i;
    container = $('#first')[0];
    $('#first').mousemove(function(ev) {
      cube.rotation.y += 0.01 * (ev.clientX - sceneWidth) / sceneWidth;
      return cube.rotation.x += 0.01 * (ev.clientY - sceneHeight) / sceneHeight;
    });
    scene = new THREE.Scene;
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer;
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);
    size = 500;
    step = 20;
    grid = new THREE.Geometry;
    for (i = _i = -size; -size <= size ? _i <= size : _i >= size; i = _i += step) {
      grid.vertices.push(new THREE.Vector3(-size, 0, i));
      grid.vertices.push(new THREE.Vector3(size, 0, i));
      grid.vertices.push(new THREE.Vector3(i, 0, -size));
      grid.vertices.push(new THREE.Vector3(i, 0, size));
    }
    grid_material = new THREE.LineBasicMaterial({
      color: 0xffffff,
      opacity: 0.2
    });
    line = new THREE.Line(grid, grid_material);
    line.type = THREE.LinePieces;
    scene.add(line);
    /*
    	Geometry
    */

    geometry = new THREE.CubeGeometry(10, 10, 10);
    material = new THREE.MeshBasicMaterial({
      color: 0xff0000
    });
    cube = new THREE.Mesh(geometry, material);
    stats = new Stats;
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    container.appendChild(stats.domElement);
    axis = new THREE.AxisHelper(10, 10, 10);
    scene.add(axis);
    camera.position = new THREE.Vector3(10, 20, 30);
    return camera.lookAt(scene.position);
  };

  /*
  Update
  */


  app_render = function() {
    requestAnimationFrame(app_render);
    stats.update();
    return renderer.render(scene, camera);
  };

  $(document).bind('ready', function() {
    app_init();
    return app_render();
  });

}).call(this);
